type Blog @model {
  id: ID!
  name: String!
  posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
}

type Post @model @key(name: "byBlog", fields: ["blogID"]) {
  id: ID!
  title: String!
  blogID: String!
  blog: Blog @connection(fields: ["blogID"])
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
}

type Comment @model @key(name: "byPost", fields: ["postID", "content"]) {
  id: ID!
  postID: ID!
  post: Post @connection(fields: ["postID"])
  content: String!
}



type Writer implements Person 
  @model
  @searchable
  @key(name: "byManager", fields: ["managerId", "hourlyPay"])
  @auth(rules: [
    {allow: groups, groups: ["Admin"]},
    {allow: public, provider: iam, operations: [read]}
  ])
{
  id: ID!
  managerId: ID!
  name: String!
  hourlyPay: Float!
  manager: Manager! @connection(fields: ["managerId"])
}

type Manager implements Person 
  @model
  @searchable
  @auth(rules: [
    {allow: groups, groups: ["Admin"]},
    {allow: public, provider: iam, operations: [read]}
  ])
{
  id: ID!
  name: String!
  department: String
  writers: [Writer!]! @connection(keyName: "byManager", fields: ["id"])
}